Leetcode Journal
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Arrays & Hashing
• Contains Duplicate (easy) 6/18/2025
  Add each element to a set if it's already in the set, return True
• Valid Anagram (easy) 6/18/2025
  Make 2 hashmaps, then check if equal
• Two Sum (easy) 6/18/2025
  Create a hashmap to store seen values (key = num, values = index). 
  Check if the difference of the target and current number is in the hashmap, and if it is you return a list with both indexes
• Group Anagrams (medium) 6/18/2025
  Make a hashmap to check anagrams (this will be a hashmap where the values are lists). For each word put it in alphabetical order (any anagrams become the same "word"). 
  Then check if it's in the hashmap (initialize and increment eac index like a list .append and = [" "]) and return a list of just the values using list(hashmap.values())
• Top K Frequent Elements (medium) 6/19/2025
  Make a hashmap to find the most common elements. Now sort the hashmap using a heap (binary tree basically) (use the built in heap functions), then pop k elements into an
  array and return
• Product of Array Except Self (medium) 6/24/2025
  The goal is answer = product of numbers to the left x product of the numbers to the right (ex. [1, 2, 3, 4, 5] 3 -> 2 * 20 = 40). So you take 2 passes (loops) one from the 
  left then one from the right, both multiplying all values before it (edges multiply 1)
• Valid Sudoku (medium) 7/16/2025
  Create 3 lists of hashsets (one for rows, columns, and 3x3 boxes). Loop through 2d array and append any values that are not in each set. If it is in the set return False. 
  if check the values is ".", if it is use continue keyword to skip that loop iteration (nothing to append). For the boxes you need to convert a 2d value into a single
  value to not waste space complexity, this solusion uses ((row // 3) * 3 + (col//3)) which basically works as a hashkey to make each grouping of 3 (for row and col) to be
  one index for the list of hashsets.
• Longest Consecutive Sequence (medium) 7/16/2025
  Create a hashset to store all numbers, and a variable to hold the longest sequence. For each number (for loop) check if the previous values is in the hashset (num-1) if it
  is, check all incrementing values (num+1, num+2, num+3, ...) until a number isnt in hashset (increment temp longest each iteration) (using a while loop). Then find if temp 
  or longest is larger and reassign and loop again until all nums are used then return. 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Stack
• Valid Parentheses (easy) 6/19/2025
  Create stack and hashmap to match parentheses (key = right parentheses, value = left parentheses). Check for left and right parentheses, append left ones (i in    
  check.values()) and make sure any right parentheses have a valid left one or the stack isn't empty. At the end make sure stack is empty (all left parentheses are popped)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Two Pointers
• Valid Palindrome (easy) 6/19/2025
  Make 2 variables that hold the indexes from the left and right. Loop while left is less than right, then check if not equal and increment

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Binary Search
• Binary Search (easy) 7/1/2025
  Have a left and a right variable that holds the indexes of the beginning and the end. And have a curent variable that is the middle of ledt and right (= (left + right_ //2)
loop until left > right. Then mid < target, set left = mid + 1. When mid > target, set right = mid - 1.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Linked List
• Reverse Linked List (easy) 7/1/2025
  Make prev, curr, and next_node variables. Set prev to none, and curr to head. Loop until curr = none. Each itertion set next_node to the next node, curr.next to prev, prev 
  to curr, and curr to the next node.
• Merge Two Linked Lists (easy) 7/1/2025
  Check if each list is empty (return other if so). Find first node (smallest) and set head equal to it. Loop until list 1 or 2 is empty, cchecking which lists ehad is    
  smaller, appending then iterating. Attach remaining nodes from none empty list and return
• Linked List Cycle (easy) 7/1/2025
  Make hashset and store nodes if seen or not (not as efficient spacewise but you need to learn some algorithm)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Sliding Window
• Best Time to Buy and Sell Stock (easy) 7/22/2025
  track the max_value (selling price - buying price) and the indexes of buy and sell price. Loop through numbers using sell as the incrementing (right side of window). If buy
  is greater than selling, then set buing equal to the selling index and move the left window up, and if selling - buying greater than max_value swap them and save the indexs 
  in the list and return the prices once loop finished 
• Longest Substring Without Repeating Characters (medium) 7/22/2025
  traking the right and left window, and the longest substring, first loop through the string for each char (looping element in right window), at the beginning have a while loop
  for removeing the current letter from seen (this will only run if there is a duplicate), removes all elements before the first apperance of the duplicate (and the original 
  duplicate), it also slides the left window over. And then it adds the duplicate back and checks for max length

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Trees
• Invert Binary Tree (easy) 7/22/2025
  using recustion you need to swap the left and right indexes. The recusrive calls are before the swap becasue the child nodes need to be swaped before the parent nodes are
  swaped. The actual code is very simple no need for DFS or BSF.
