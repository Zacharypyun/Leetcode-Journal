Leetcode Journal
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Arrays & Hashing
• Contains Duplicate (easy) 6/18/2025
  Add each element to a set if it's already in the set, return True
• Valid Anagram (easy) 6/18/2025
  Make 2 hashmaps, then check if equal
• Two Sum (easy) 6/18/2025
  Create a hashmap to store seen values (key = num, values = index). 
  Check if the difference of the target and current number is in the hashmap, and if it is you return a list with both indexes
• Group Anagrams (medium) 6/18/2025
  Make a hashmap to check anagrams (this will be a hashmap where the values are lists). For each word put it in alphabetical order (any anagrams become the same "word"). 
  Then check if it's in the hashmap (initialize and increment eac index like a list .append and = [" "]) and return a list of just the values using list(hashmap.values())
• Top K Frequent Elements (medium) 6/19/2025
  Make a hashmap to find the most common elements. Now sort the hashmap using a heap (binary tree basically) (use the built in heap functions), then pop k elements into an
  array and return
• Encode and Decode Strings (medium) 7/22/2025
  encode using the length of the string, some special character, and the string itself. To decode have 2 pointers, one that track the beginnings of the strings/lengths and the 
  other for the ends (the end one will be the internal loop). using the end pointer, iterate until the specal character is found, then store the length (str[start:end]), then
  find the actual string append and repeat
• Product of Array Except Self (medium) 6/24/2025
  The goal is answer = product of numbers to the left x product of the numbers to the right (ex. [1, 2, 3, 4, 5] 3 -> 2 * 20 = 40). So you take 2 passes (loops) one from the 
  left then one from the right, both multiplying all values before it (edges multiply 1)
• Valid Sudoku (medium) 7/16/2025
  Create 3 lists of hashsets (one for rows, columns, and 3x3 boxes). Loop through 2d array and append any values that are not in each set. If it is in the set return False. 
  if check the values is ".", if it is use continue keyword to skip that loop iteration (nothing to append). For the boxes you need to convert a 2d value into a single
  value to not waste space complexity, this solusion uses ((row // 3) * 3 + (col//3)) which basically works as a hashkey to make each grouping of 3 (for row and col) to be
  one index for the list of hashsets.
• Longest Consecutive Sequence (medium) 7/16/2025
  Create a hashset to store all numbers, and a variable to hold the longest sequence. For each number (for loop) check if the previous values is in the hashset (num-1) if it
  is, check all incrementing values (num+1, num+2, num+3, ...) until a number isnt in hashset (increment temp longest each iteration) (using a while loop). Then find if temp 
  or longest is larger and reassign and loop again until all nums are used then return. 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Stack
• Valid Parentheses (easy) 6/19/2025
  Create stack and hashmap to match parentheses (key = right parentheses, value = left parentheses). Check for left and right parentheses, append left ones (i in    
  check.values()) and make sure any right parentheses have a valid left one or the stack isn't empty. At the end make sure stack is empty (all left parentheses are popped)
• Min Stack (medium) 7/23/2025
  a min stack is a stack where there is both a regular stack and a stack that contains the minimum value at each inserted value. For any value that is pushed you push the
  current/new minimum into the min stack. when popping pop both stacks becasue its fifo so the top value will always be the recently inserted element for both the stack and 
  min
• Evaluate Reverse Polish Notation (medium) 7/23/2025
  Its gives you postfix notation and you need to evaluate it. Literally just push everyhting into the stack, and when you come across an opperator pop the top 2 elements and
  evaluate then push answer back to stack

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Two Pointers
• Valid Palindrome (easy) 6/19/2025
  Make 2 variables that hold the indexes from the left and right. Loop while left is less than right, then check if not equal and increment
• Two Sum II (medium) 7/22/2025
  have a left and a right pointer. Loop while left < right. Track the current sum (left + right) if the current sum is greater than the target, decrement right, if its less
  than, increment left. then return
• 3 Sum (medium) 7/23/2025
  you will have 3 pointers, and the best possible runtime is O(n^2). Sort the numbers before starting. The outside loop controlls the left pointer and increments down the 
  numbers. When a triplet is found increment both right and mid increment. However for all 3 pointers you need to skip duplicates, because occasionally if you leave them
  you will end up with the same triplet again just with a diffrent index (but the same value) for one of the pointers. (for all of them onces a triplet is found increment 
  until not on a duplicate)
  act as the 2 pointers (this part is like a normal 2 pointers problem). check current sum and increment and decrement based on 
• Container With Most Water (medium) 7/22/2025
  create left and right pointer and max area. Loop while left < right, inside loop track current area. If the increment/deincrement which ever height is smaller then return

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Binary Search
• Binary Search (easy) 7/1/2025
  Have a left and a right variable that holds the indexes of the beginning and the end. And have a curent variable that is the middle of ledt and right (= (left + right_ //2)
loop until left > right. Then mid < target, set left = mid + 1. When mid > target, set right = mid - 1.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Linked List
• Reverse Linked List (easy) 7/1/2025
  Make prev, curr, and next_node variables. Set prev to none, and curr to head. Loop until curr = none. Each itertion set next_node to the next node, curr.next to prev, prev 
  to curr, and curr to the next node.
• Merge Two Linked Lists (easy) 7/1/2025
  Check if each list is empty (return other if so). Find first node (smallest) and set head equal to it. Loop until list 1 or 2 is empty, cchecking which lists ehad is    
  smaller, appending then iterating. Attach remaining nodes from none empty list and return
• Linked List Cycle (easy) 7/1/2025
  Make hashset and store nodes if seen or not (not as efficient spacewise but you need to learn some algorithm)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Sliding Window
• Best Time to Buy and Sell Stock (easy) 7/22/2025
  track the max_value (selling price - buying price) and the indexes of buy and sell price. Loop through numbers using sell as the incrementing (right side of window). If buy
  is greater than selling, then set buing equal to the selling index and move the left window up, and if selling - buying greater than max_value swap them and save the indexs 
  in the list and return the prices once loop finished 
• Longest Substring Without Repeating Characters (medium) 7/22/2025
  traking the right and left window, and the longest substring, first loop through the string for each char (looping element in right window), at the beginning have a while loop
  for removeing the current letter from seen (this will only run if there is a duplicate), removes all elements before the first apperance of the duplicate (and the original 
  duplicate), it also slides the left window over. And then it adds the duplicate back and checks for max length

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Trees
• Invert Binary Tree (easy) 7/22/2025
  using recustion you need to swap the left and right indexes. The recusrive calls are before the swap becasue the child nodes need to be swaped before the parent nodes are
  swaped. The actual code is very simple no need for DFS or BSF.
• Maximum Depth of Binary Tree (easy) 7/22/2025
  we will use recursice DFS. base case is to return 0 when the node is null. think about the tree, you only need one branch each recusrion so you take the max(left, right)
• Diameter of Binary Tree (easy) 7/24/2025
  track the maximum diameter and attempt to update it whenever your reach a leaf node. We know that the longest path will at some point go though so parent node, so at each 
  node the maxDiamter will be the max of the left side plus the max of the   right side, so the challenge is finding the max of the left and right subtree. In order to do 
  this the final return will be the max of the left and rigth subtrees + 1. because the diameter of that node will be the root + which ever the longest subtree is for both 
  the right and left
• Balanced Binary Tree (easy) 7/24/2025
  the goal is to find if the diffrence of the height of 2 subtrees is ever greater than 1. In order to do this you need to make a helper function that finds the height of 
  the two subtrees of a node and makes sure that subtrees are always within 1 of each other. The problem I had was that once I was finding a pair of subtrees that were not 
  balanced, I kept checking which led to a True being passed when another valid subtree was found. To fix it I needed to add if leftHeight < 0 or rightHeight < 0 or   
  abs(leftHeight - rightHeight) > 1: return 1. this will prevent from any other subtrees being checked once one is invalid by setting either rightHeight or leftHeight to -1
  which the if statement blocks
• Same Tree (easy) 7/24/2025
  the way to check it is to use dfs and at each recursion check to ty to prove it false (ie. the 2 nodes are notequal, or one is none and the other isnt). And the base case 
  of where both nodes are None (returns true, proving that both trees are the same because no False value was ever returned)
• Subtree of Another Tree (easy) 7/24/2025
  Uses the same idea in Same Tree as a helper function to help prove that a subtree is the same as the provided tree. Then using the check function check every node to try 
  and find a node here its tree and the provided subtree return true from check()

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Heap & Priority Queue
• Kth Largest Element in a Stream (easy) 7/30/2025
  int __init__ you define self.k and self.nums (pq). Then you make sure that the pq always has k elements and the first element (min) will always be the kth element 
• Last Stone Weight (easy) 7/30/2025
  turn the list of stones into a max heap priority queue. To do this you insert all stones into a min heap but as negatives (which makes it a min heap). then just iterate until
  "max heap" has 1 or less values in it and return