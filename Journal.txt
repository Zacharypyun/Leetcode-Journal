Leetcode Journal
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Arrays & Hashing
• Contains Duplicate (easy) 6/18/2025
  Add each element to a set if it's already in the set reutrn True
• Valid Anagram (easy) 6/18/2025
  Make 2 hashmaps then check if equal
• Two Sum (easy) 6/18/2025
  Create a hashmap to store seen values (key = num, values = index). 
  Check if the difference of the target and current number is in the hashmapp, and if it is you return a list with both indexes
• Group Anagrams (medium) 6/18/2025
  Make a hashmap to check anagrams (this will be a hashmap where the values are lists). For each word put it in alphabetical order (any anagrams become the same "word"). 
  Then check if it's in the hashmap (initilize and increment eac index like a list .append and = [" "]) and return a list of just the values using list(hashmap.values())
• Top K Frequent Elements (medium) 6/19/2025
  Make a hashmap to find the most common elements. Now sort the hashmap using a heap (binary tree basically) (use the built in heap functions), then pop k elements into an
  array and return
• Product of Array Except Self (medium) 6/24/2025
  The goal is answer = product of numbers to the left x product of the numbers to the right (ex. [1, 2, 3, 4, 5] 3 -> 2 * 20 = 40). So you take 2 passes (loops) one from the 
  left then one from the right, both multiplying all values before it (edges multiply 1)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Stack
• Valid Parentheses (easy) 6/19/2025
  Create stack and hashmap to match parentheses (key = right parentheses, value = left parentheses). Check for left and right parentheses, append left ones (i in    
  check.values()) and make sure any right parentheses have a valid left one or the stack isn't empty. At the end make sure stack is empty (all left parentheses are popped)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⭐ Two Pointers
• Valid Palindrome (easy) 6/19/2025
  Make 2 variables that hold the indexes from the left and right. Loop while left is less than right, then check if not equal and increment
